#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE
password=$YNH_APP_ARG_PASSWORD
security_password_salt=$(ynh_string_random 30)
secret_key=$(ynh_string_random 30)

app=$YNH_APP_INSTANCE_NAME

# Define app's data directory
datadir="/home/yunohost.app/${app}"

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_print_info --message="Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info --message="Storing installation settings..."

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=admin --value=$admin
ynh_app_setting_set --app=$app --key=is_public --value=$is_public
ynh_app_setting_set --app=$app --key=language --value=$language
ynh_app_setting_set --app=$app --key=security_password_salt --value=$security_password_salt
ynh_app_setting_set --app=$app --key=secret_key --value=$secret_key
ynh_app_setting_set --app=$app --key=datadir --value=$datadir

ynh_app_setting_set --app=$app --key=final_path --value=$final_path

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_print_info --message="Configuring firewall..."

# Find a free port
port=$(ynh_find_port --port=8095)

ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL BUILD DEPENDENCIES
#=================================================
ynh_print_info --message="Installing build dependencies..."

ynh_install_app_dependencies $build_dependencies

#=================================================
# BUILD AUDIOWAVEFORM
#=================================================
ynh_print_info --message="Building audiowaveform..."

ynh_setup_source --dest_dir="$final_path/audiowaveform.d/audiowaveform" --source_id=audiowaveform
ynh_setup_source --dest_dir="$final_path/audiowaveform.d/googletest" --source_id=googletest

pushd "$final_path/audiowaveform.d/audiowaveform"
    ln -s $final_path/audiowaveform.d/googletest/googletest googletest
    ln -s $final_path/audiowaveform.d/googletest/googlemock googlemock
    mkdir build
    cd build
    cmake ..
    make 
    cp $final_path/audiowaveform.d/audiowaveform/build/audiowaveform $final_path/.
popd

ynh_secure_remove --file="$final_path/audiowaveform.d/"

#=================================================
# REMOVE BUILD DEPENDENCIES
#=================================================
ynh_print_info --message="Removing build dependencies"

# Remove metapackage and its dependencies
ynh_remove_app_dependencies

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info --message="Installing dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_print_info --message="Creating a PostgreSQL database..."

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
db_pwd=$(ynh_string_random --length=30)
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd
ynh_psql_test_if_first_run
ynh_psql_setup_db --db_user=$db_user --db_name=$db_name --db_pwd=$db_pwd
ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" --database=$db_name

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info --message="Setting up source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info --message="Configuring nginx web server..."

### `ynh_add_nginx_config` will use the file conf/nginx.conf

# Create a dedicated nginx config
ynh_add_nginx_config "datadir"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info --message="Configuring system user..."

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE THE DATA DIRECTORY
#=================================================
ynh_print_info --message="Create the data directory..."

# Create app folders
mkdir -p "$datadir"
mkdir -p "$datadir/uploads/sounds"
mkdir -p "$datadir/uploads/waveforms"
mkdir -p "$datadir/tmp"

# Give permission to the datadir
chown -R "$app": "$datadir"

#=================================================
# MODIFY A CONFIG FILE
#=================================================

config="$final_path/config.py"
cp ../conf/config.py.sample "$config"

ynh_replace_string --match_string="__LANGUAGE__" --replace_string="$language" --target_file="$config"
ynh_replace_string --match_string="__DATADIR__" --replace_string="$datadir" --target_file="$config"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$config"
ynh_replace_string --match_string="__SECURITY_PASSWORD_SALT__" --replace_string="$security_password_salt" v"$config"
ynh_replace_string --match_string="__SECRET_KEY__" --replace_string="$secret_key" --target_file="$config"
ynh_replace_string --match_string="__DB_USER__" --replace_string="$db_user" --target_file="$config"
ynh_replace_string --match_string="__DB_PWD__" --replace_string="$db_pwd" --target_file="$config"
ynh_replace_string --match_string="__DB_NAME__" --replace_string="$db_name" --target_file="$config"
ynh_replace_string --match_string="__FINAL_PATH__" --replace_string="$final_path" --target_file="$config"

#=================================================
# INSTALL PYTHONZ TO GET PYTHON 3.6
#=================================================

# Get pythonz
# curl -kL https://raw.githubusercontent.com/saghul/pythonz/master/pythonz-install
# ./pythonz-install
ynh_setup_source "$final_path/.pythonz" pythonz
export PYTHONZ_ROOT="$final_path/.pythonz"
# Then install it
python $final_path/.pythonz/pythonz_install.py

# Install Python 3.6.6
$final_path/.pythonz/bin/pythonz install 3.7.3

#=================================================
# INSTALL REEL2BITS
#=================================================

pushd $final_path
	virtualenv -p $($final_path/.pythonz/bin/pythonz locate 3.7.3) ve3
	ve3/bin/pip3 install --requirement requirements.txt
	ve3/bin/python3 setup.py install
	export FLASK_ENV=production
	ve3/bin/flask db upgrade
	ve3/bin/flask seed
	ve3/bin/pip3 install waitress
	#ve3/bin/flask users create --password TEXT -a IDENTITY
	#ve3/bin/flask roles add yalh@yh.yalh.net admin
popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info --message="Configuring a systemd service..."

ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="../conf/reel2bits-web.service"

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app-web" --template="reel2bits-web.service"
ynh_add_systemd_config --service="$app-worker" --template="reel2bits-worker.service"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="$config"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R "$app": "$final_path"

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

#yunohost service add $app --description "$app daemon for XXX" --log "/var/log/$app/$app.log"
yunohost service add "$app-web" --description "$app-web daemon for Reel2Bits"
yunohost service add "$app-worker" --description "$app-worker daemon for Reel2Bits"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_print_info --message="Starting a systemd service..."

ynh_systemd_action --service_name=${app}-web --action="start" --log_path=systemd --line_match="Started ${app}-web"
ynh_systemd_action --service_name=${app}-worker --action="start" --log_path=systemd --line_match="Started ${app}-worker"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info --message="Configuring SSOwat..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info --message="Installation of $app completed"

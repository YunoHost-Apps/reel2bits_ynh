#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_systemd_action
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	read -p "key"
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE
password=$YNH_APP_ARG_PASSWORD
security_password_salt=$(ynh_string_random 30)
secret_key=$(ynh_string_random 30)

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_print_info "Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info "Storing installation settings..."

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set $app language $language
ynh_app_setting_set $app security_password_salt $security_password_salt
ynh_app_setting_set $app secret_key $secret_key

ynh_app_setting_set $app final_path $final_path

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_print_info "Configuring firewall..."

# Find a free port
port=$(ynh_find_port 8095)
ynh_app_setting_set $app port $port

#=================================================
# INSTALL BUILD DEPENDENCIES
#=================================================
ynh_print_info "Installing build dependencies..."

ynh_install_app_dependencies $build_dependencies

#=================================================
# BUILD AUDIOWAVEFORM
#=================================================
ynh_print_info "Building audiowaveform..."

ynh_setup_source "$final_path/audiowaveform.d/audiowaveform" audiowaveform
ynh_setup_source "$final_path/audiowaveform.d/googletest" googletest

pushd "$final_path/audiowaveform.d/audiowaveform"
    ln -s $final_path/audiowaveform.d/googletest/googletest googletest
    ln -s $final_path/audiowaveform.d/googletest/googlemock googlemock
    mkdir build
    cd build
    cmake ..
    make 
    cp $final_path/audiowaveform.d/audiowaveform/build/audiowaveform $final_path/.
popd

ynh_secure_remove "$final_path/audiowaveform.d/"

#=================================================
# REMOVE BUILD DEPENDENCIES
#=================================================
ynh_print_info "Removing build dependencies"

# Remove metapackage and its dependencies
ynh_remove_app_dependencies

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info "Installing dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_print_info "Creating a PostgreSQL database..."

db_name=$(ynh_sanitize_dbid $app)
db_user=$db_name
db_pwd=$(ynh_string_random 30)
ynh_app_setting_set "$app" db_name "$db_name"
ynh_app_setting_set "$app" db_pwd "$db_pwd"
ynh_psql_test_if_first_run
ynh_psql_create_user "$app" "$db_pwd"
ynh_psql_execute_as_root "CREATE DATABASE $db_name ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0 OWNER $db_user;"
ynh_psql_execute_as_root "\connect $db_name 
CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Setting up source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Configuring nginx web server..."

### `ynh_add_nginx_config` will use the file conf/nginx.conf

# Create a dedicated nginx config
ynh_add_nginx_config app

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Configuring system user..."

# Create a system user
ynh_system_user_create $app

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE THE DATA DIRECTORY
#=================================================
ynh_print_info "Create the data directory..."

# Define app's data directory
datadir="/home/yunohost.app/${app}"

# Create app folders
mkdir -p "$datadir"
mkdir -p "$datadir/uploads/sounds"
mkdir -p "$datadir/uploads/waveforms"
mkdir -p "$datadir/tmp"

# Give permission to the datadir
chown -R "$app":"$app" "$datadir"

ynh_app_setting_set $app datadir $datadir

#=================================================
# MODIFY A CONFIG FILE
#=================================================

config="$final_path/config.py"
cp ../conf/config.py.sample "$config"

ynh_replace_string "__LANGUAGE__" "$language" "$config"
ynh_replace_string "__APP__" "$app" "$config"
ynh_replace_string "__DOMAIN__" "$domain" "$config"
ynh_replace_string "__SECURITY_PASSWORD_SALT__" "$security_password_salt" "$config"
ynh_replace_string "__SECRET_KEY__" "$secret_key" "$config"
ynh_replace_string "__DB_USER__" "$db_user" "$config"
ynh_replace_string "__DB_PWD__" "$db_pwd" "$config"
ynh_replace_string "__DB_NAME__" "$db_name" "$config"
ynh_replace_string "__FINAL_PATH__" "$final_path" "$config"

#=================================================
# INSTALL PYTHONZ TO GET PYTHON 3.6
#=================================================

# Get pythonz
# curl -kL https://raw.githubusercontent.com/saghul/pythonz/master/pythonz-install
# ./pythonz-install
ynh_setup_source "$final_path/.pythonz" pythonz
export PYTHONZ_ROOT="$final_path/.pythonz"
# Then install it
python $final_path/.pythonz/pythonz_install.py

# Install Python 3.6.6
$final_path/.pythonz/bin/pythonz install 3.7.3

#=================================================
# INSTALL REEL2BITS
#=================================================

pushd $final_path
	virtualenv -p $($final_path/.pythonz/bin/pythonz locate 3.7.3) ve3
	ve3/bin/pip3 install --requirement requirements.txt
	ve3/bin/python3 setup.py install
	export FLASK_ENV=production
	ve3/bin/flask db upgrade
	ve3/bin/flask seed
	#ve3/bin/flask run
	ve3/bin/pip3 install waitress
	#ve3/bin/flask users create --password TEXT -a IDENTITY
	#ve3/bin/flask roles add yalh@yh.yalh.net admin
popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info "Configuring a systemd service..."

ynh_replace_string "__PORT__" "$port" "../conf/reel2bits-web.service"

# Create a dedicated systemd config
ynh_add_systemd_config "$app-web"       "reel2bits-web.service"
ynh_add_systemd_config "$app-worker"       "reel2bits-worker.service"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$config"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R $app:root $final_path

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

#yunohost service add $app --description "$app daemon for XXX" --log "/var/log/$app/$app.log"
yunohost service add "$app-web"
yunohost service add "$app-worker"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Configuring SSOwat..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# START REEL2BITS SERVICES
#=================================================
ynh_print_info "Starting Reel2bits services..."

ynh_systemd_action --action=start --service_name=${app}-web --log_path=systemd --line_match="Started ${app}-web"
ynh_systemd_action --action=start --service_name=${app}-worker --log_path=systemd --line_match="Started ${app}-worker"

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Installation of $app completed"

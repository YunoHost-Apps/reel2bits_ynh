#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info "Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
admin=$(ynh_app_setting_get $app admin)
is_public=$(ynh_app_setting_get $app is_public)
final_path=$(ynh_app_setting_get $app final_path)
language=$(ynh_app_setting_get $app language)
db_name=$(ynh_app_setting_get $app db_name)
db_user=$db_name
datadir=$(ynh_app_setting_get $app datadir)
security_password_salt=$(ynh_app_setting_get $app security_password_salt)
secret_key=$(ynh_app_setting_get $app secret_key)
db_pwd=$(ynh_app_setting_get $app db_pwd)
port=$(ynh_app_setting_get $app port)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info "Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info "Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	ynh_clean_check_starting
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STOP REEL2BITS SERVICES
#=================================================
ynh_print_info "Stopping Reel2bits services..."

ynh_systemd_action --action=stop --service_name=${app}-web --log_path=systemd --line_match="Stopped ${app}-web"
ynh_systemd_action --action=stop --service_name=${app}-worker --log_path=systemd --line_match="Stopped ${app}-worker"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Upgrading source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config "app"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info "Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create $app

#=================================================
# SPECIFIC UPGRADE
#=================================================
# MODIFY A CONFIG FILE
#=================================================

config="$final_path/config.py"
cp ../conf/config.py.sample "$config"

ynh_replace_string "__LANGUAGE__" "$language" "$config"
ynh_replace_string "__DATADIR__" "$datadir" "$config"
ynh_replace_string "__DOMAIN__" "$domain" "$config"
ynh_replace_string "__SECURITY_PASSWORD_SALT__" "$security_password_salt" "$config"
ynh_replace_string "__SECRET_KEY__" "$secret_key" "$config"
ynh_replace_string "__DB_USER__" "$db_user" "$config"
ynh_replace_string "__DB_PWD__" "$db_pwd" "$config"
ynh_replace_string "__DB_NAME__" "$db_name" "$config"
ynh_replace_string "__FINAL_PATH__" "$final_path" "$config"

ynh_backup_if_checksum_is_different "$config"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum "$config"

#=================================================
# INSTALL PYTHONZ TO GET PYTHON 3.6
#=================================================

# Get pythonz
# curl -kL https://raw.githubusercontent.com/saghul/pythonz/master/pythonz-install
# ./pythonz-install
ynh_setup_source "$final_path/.pythonz" pythonz
export PYTHONZ_ROOT="$final_path/.pythonz"
# Then install it
python $final_path/.pythonz/pythonz_install.py

# Install Python 3.6.6
$final_path/.pythonz/bin/pythonz install 3.7.3

#=================================================
# INSTALL REEL2BITS
#=================================================

pushd $final_path
	virtualenv -p $($final_path/.pythonz/bin/pythonz locate 3.7.3) ve3
	ve3/bin/pip3 install --requirement requirements.txt
	ve3/bin/python3 setup.py install
	export FLASK_ENV=production
	ve3/bin/flask db upgrade
	ve3/bin/flask seed
	#ve3/bin/flask run
	ve3/bin/pip3 install waitress
	#ve3/bin/flask users create --password TEXT -a IDENTITY
	#ve3/bin/flask roles add yalh@yh.yalh.net admin
popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info "Upgrading systemd configuration..."

ynh_replace_string "__PORT__" "$port" "../conf/reel2bits-web.service"

# Create a dedicated systemd config
ynh_add_systemd_config "$app-web"       "reel2bits-web.service"
ynh_add_systemd_config "$app-worker"       "reel2bits-worker.service"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R $app:root $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# START REEL2BITS SERVICES
#=================================================
ynh_print_info "Starting Reel2bits services..."

ynh_systemd_action --action=start --service_name=${app}-web --log_path=systemd --line_match="Started ${app}-web"
ynh_systemd_action --action=start --service_name=${app}-worker --log_path=systemd --line_match="Started ${app}-worker"

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Upgrade of $app completed"

#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_swap
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=db_pwd)
datadir=$(ynh_app_setting_get --app=$app --key=datadir)
security_password_salt=$(ynh_app_setting_get --app=$app --key=security_password_salt)
secret_key=$(ynh_app_setting_get --app=$app --key=secret_key)
port=$(ynh_app_setting_get --app=$app --key=port)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	ynh_clean_check_starting
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_print_info --message="Stopping a systemd service..."

ynh_systemd_action --service_name=${app}-web --action="stop" --log_path=systemd --line_match="Stopped ${app}-web"
ynh_systemd_action --service_name=${app}-worker --action="stop" --log_path=systemd --line_match="Stopped ${app}-worker"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_print_info --message="Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
	ynh_replace_string --match_string="flasgger==0.9.3" --replace_string="flasgger==0.9.4" --target_file="$final_path/api/requirements.txt"
	ynh_replace_string --match_string="Flask_Babelex==0.9.3" --replace_string="Flask_Babelex>=0.9.4" --target_file="$final_path/api/requirements.txt"
	ynh_replace_string --match_string="flask_uploads==0.2.1" --replace_string="flask_uploads>=0.2.1" --target_file="$final_path/api/requirements.txt"

	ynh_setup_source --dest_dir="$final_path/front/dist" --source_id=front
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config "datadir"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# ADD SWAP
#=================================================
ynh_print_info --message="Adding $swap_needed Mo to swap..."

ynh_add_swap --size=$swap_needed

#=================================================
# CREATE THE DATA DIRECTORY
#=================================================
ynh_print_info --message="Create the data directory..."

# Create app folders
mkdir -p "$datadir"
mkdir -p "$datadir/uploads/sounds"
mkdir -p "$datadir/uploads/waveforms"
mkdir -p "$datadir/uploads/artwork_albums"
mkdir -p "$datadir/uploads/artwork_sounds"
mkdir -p "$datadir/uploads/avatars"

# Give permission to the datadir
chown -R "$app": "$datadir"

#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_print_info --message="Modifying a config file..."

api_config="$final_path/api/config/prod_secret.py"
ynh_backup_if_checksum_is_different --file="$api_config"
cp ../conf/prod_secret.py "$api_config"

ynh_replace_string --match_string="__LANGUAGE__" --replace_string="$language" --target_file="$api_config"
ynh_replace_string --match_string="__DATADIR__" --replace_string="$datadir" --target_file="$api_config"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$api_config"
ynh_replace_string --match_string="__SECURITY_PASSWORD_SALT__" --replace_string="$security_password_salt" --target_file="$api_config"
ynh_replace_string --match_string="__SECRET_KEY__" --replace_string="$secret_key" --target_file="$api_config"
ynh_replace_string --match_string="__DB_USER__" --replace_string="$db_user" --target_file="$api_config"
ynh_replace_string --match_string="__DB_PWD__" --replace_string="$db_pwd" --target_file="$api_config"
ynh_replace_string --match_string="__DB_NAME__" --replace_string="$db_name" --target_file="$api_config"
ynh_replace_string --match_string="__FINAL_PATH__" --replace_string="$final_path" --target_file="$api_config"

front_config="$final_path/front/config/local.json"
ynh_backup_if_checksum_is_different --file="$front_config"
cp ../conf/local.example.json "$front_config"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$front_config"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_print_info --message="Storing the config file checksum..."

# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$api_config"

#=================================================
# INSTALL PYTHONZ TO GET PYTHON
#=================================================
ynh_print_info --message="Installing Python..."

# Get pythonz
# curl -kL https://raw.githubusercontent.com/saghul/pythonz/master/pythonz-install
# ./pythonz-install
ynh_setup_source --dest_dir="$final_path/.pythonz" --source_id=pythonz
export PYTHONZ_ROOT="$final_path/.pythonz"
# Then install it
python $final_path/.pythonz/pythonz_install.py

# Install Python
$final_path/.pythonz/bin/pythonz install $PYTHON_VERSION

#=================================================
# INSTALL REEL2BITS
#=================================================
ynh_print_info --message="Installing Reel2Bits..."

pushd $final_path/api
	virtualenv -p $($final_path/.pythonz/bin/pythonz locate $PYTHON_VERSION) ve3
	ve3/bin/pip3 install wheel
	ve3/bin/pip3 install --requirement requirements.txt
	#ve3/bin/python3 setup.py install
	export APP_SETTINGS='config.prod_secret.Config'
	ve3/bin/flask db upgrade
	ve3/bin/pip3 install waitress
	#ve3/bin/flask users create --password TEXT -a IDENTITY
	#ve3/bin/flask roles add yalh@yh.yalh.net admin
popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info --message="Upgrading systemd configuration..."

ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="../conf/reel2bits-web.service"

# Create a dedicated systemd config
cp ../conf/reel2bits.target /etc/systemd/system/reel2bits.target
ynh_add_systemd_config --service="$app-web" --template="reel2bits-web.service"
ynh_add_systemd_config --service="$app-worker" --template="reel2bits-worker.service"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_print_info --message="Securing files and directories..."

# Set permissions on app files
chown -R "$app": "$final_path"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info --message="Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_print_info --message="Starting a systemd service..."

ynh_systemd_action --service_name=${app}-web --action="start" --log_path=systemd --line_match="Started ${app}-web"
ynh_systemd_action --service_name=${app}-worker --action="start" --log_path=systemd --line_match="Started ${app}-worker"
systemctl start $app.target

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info --message="Upgrade of $app completed"
